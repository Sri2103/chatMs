// Code generated by mockery v2.50.4. DO NOT EDIT.

package user

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	user "github.com/sri2103/chat_me/protos/user"
)

// MockAuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type MockAuthServiceClient struct {
	mock.Mock
}

type MockAuthServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthServiceClient) EXPECT() *MockAuthServiceClient_Expecter {
	return &MockAuthServiceClient_Expecter{mock: &_m.Mock}
}

// CreateAuth provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthServiceClient) CreateAuth(ctx context.Context, in *user.CreateAuthRequest, opts ...grpc.CallOption) (*user.CreateAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuth")
	}

	var r0 *user.CreateAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.CreateAuthRequest, ...grpc.CallOption) (*user.CreateAuthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.CreateAuthRequest, ...grpc.CallOption) *user.CreateAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.CreateAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.CreateAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceClient_CreateAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuth'
type MockAuthServiceClient_CreateAuth_Call struct {
	*mock.Call
}

// CreateAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.CreateAuthRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) CreateAuth(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_CreateAuth_Call {
	return &MockAuthServiceClient_CreateAuth_Call{Call: _e.mock.On("CreateAuth",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_CreateAuth_Call) Run(run func(ctx context.Context, in *user.CreateAuthRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_CreateAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.CreateAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthServiceClient_CreateAuth_Call) Return(_a0 *user.CreateAuthResponse, _a1 error) *MockAuthServiceClient_CreateAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceClient_CreateAuth_Call) RunAndReturn(run func(context.Context, *user.CreateAuthRequest, ...grpc.CallOption) (*user.CreateAuthResponse, error)) *MockAuthServiceClient_CreateAuth_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyAuth provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthServiceClient) DestroyAuth(ctx context.Context, in *user.DestroyAuthRequest, opts ...grpc.CallOption) (*user.DestroyAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DestroyAuth")
	}

	var r0 *user.DestroyAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.DestroyAuthRequest, ...grpc.CallOption) (*user.DestroyAuthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.DestroyAuthRequest, ...grpc.CallOption) *user.DestroyAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.DestroyAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.DestroyAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceClient_DestroyAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyAuth'
type MockAuthServiceClient_DestroyAuth_Call struct {
	*mock.Call
}

// DestroyAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.DestroyAuthRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) DestroyAuth(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_DestroyAuth_Call {
	return &MockAuthServiceClient_DestroyAuth_Call{Call: _e.mock.On("DestroyAuth",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_DestroyAuth_Call) Run(run func(ctx context.Context, in *user.DestroyAuthRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_DestroyAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.DestroyAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthServiceClient_DestroyAuth_Call) Return(_a0 *user.DestroyAuthResponse, _a1 error) *MockAuthServiceClient_DestroyAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceClient_DestroyAuth_Call) RunAndReturn(run func(context.Context, *user.DestroyAuthRequest, ...grpc.CallOption) (*user.DestroyAuthResponse, error)) *MockAuthServiceClient_DestroyAuth_Call {
	_c.Call.Return(run)
	return _c
}

// FetchAuth provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthServiceClient) FetchAuth(ctx context.Context, in *user.FetchAuthRequest, opts ...grpc.CallOption) (*user.FetchAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FetchAuth")
	}

	var r0 *user.FetchAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.FetchAuthRequest, ...grpc.CallOption) (*user.FetchAuthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.FetchAuthRequest, ...grpc.CallOption) *user.FetchAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.FetchAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.FetchAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceClient_FetchAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAuth'
type MockAuthServiceClient_FetchAuth_Call struct {
	*mock.Call
}

// FetchAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.FetchAuthRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) FetchAuth(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_FetchAuth_Call {
	return &MockAuthServiceClient_FetchAuth_Call{Call: _e.mock.On("FetchAuth",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_FetchAuth_Call) Run(run func(ctx context.Context, in *user.FetchAuthRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_FetchAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.FetchAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthServiceClient_FetchAuth_Call) Return(_a0 *user.FetchAuthResponse, _a1 error) *MockAuthServiceClient_FetchAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceClient_FetchAuth_Call) RunAndReturn(run func(context.Context, *user.FetchAuthRequest, ...grpc.CallOption) (*user.FetchAuthResponse, error)) *MockAuthServiceClient_FetchAuth_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthServiceClient creates a new instance of MockAuthServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
